mixin picture(type = 'png' | 'jpg' | 'svg', imageName = String, dimentions = String(""), retinaDimentions = String(""))
	- imageName = images + imageName
	+picture-constructor(type, imagePlaceholder, imageName, dimentions, retinaDimentions, true, false)&attributes(attributes)


mixin picture-min(type = 'png' | 'jpg' | 'svg', imageName = String, dimentions = String(""), retinaDimentions = String(""))
	- imageName = images + imageName
	+picture-constructor(type, `${imageName}-min`, imageName, dimentions, retinaDimentions, true, true)&attributes(attributes).lazymin


mixin picture-constructor(imageExtension, imageSrc = imagePlaceholder, imageDataSrc, breakpointsLetters = '', retinaLetters = '', includeWebp = true, usePreloadImage = false)
	picture
		-
			function getImageSrc(dimention) {
				return (usePreloadImage && imageSrc !== imagePlaceholder) ? `${imageSrc}${dimention ? `-${dimention}` : ''}.${imageExtension}` : imagePlaceholder
			}			


		- const reversedBreakpointsLetters = breakpointsLetters.split('').reverse().join('')

		each letter in reversedBreakpointsLetters
			- const dimention = breakpointsLetterCollation[letter]

			-
				const sourceParameters = [
					breakpoints[dimention],
					getImageSrc(dimention),
					`${imageDataSrc}-${dimention}`,
					imageExtension,
					retinaLetters.includes(letter) ? true : false,
					includeWebp
				]

			+_picture-source(...sourceParameters)

		else
			+_picture-source(0, getImageSrc(), imageDataSrc, imageExtension, retinaLetters ? true : false, includeWebp)

		if breakpointsLetters
			- const imgDimention = breakpointsLetterCollation[reversedBreakpointsLetters[0]]

			img(src!=getImageSrc(imgDimention) data-src!=`${imageDataSrc}-${imgDimention}.${imageExtension}` alt='' class=`lazyload`)&attributes(attributes)

		else
			img(src!=getImageSrc() data-src!=`${imageDataSrc}` alt='' class=`lazyload`)&attributes(attributes)


mixin _picture-source(media = 0, srcset, dataSrcsetBase, type, useRetina = false, includeWebp = false)
	- const postfixRetina = '@2x'

	if includeWebp === true && (type === 'jpg' || type === 'png')
		if useRetina
			source(media=`(min-width: ${media}px)` srcset!=srcset data-srcset!=`${dataSrcsetBase}${postfixRetina}.webp 2x, ${dataSrcsetBase}.webp 1x` type=`image/webp`)
		else
			source(media=`(min-width: ${media}px)` srcset!=srcset data-srcset!=`${dataSrcsetBase}.webp` type=`image/webp`)

	if useRetina
		source(media=`(min-width: ${media}px)` srcset!=srcset data-srcset!=`${dataSrcsetBase}${postfixRetina}.${type} 2x, ${dataSrcsetBase}.${type} 1x` type=`image/${type === 'svg' ? 'svg+xml' : type}`)
	else
		source(media=`(min-width: ${media}px)` srcset!=srcset data-srcset!=`${dataSrcsetBase}.${type}` type=`image/${type === 'svg' ? 'svg+xml' : type}`)
